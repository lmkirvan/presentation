---
format: 
  revealjs:
    theme: [moon, styles.scss]
editor: visual
---

# Sometimes you just need words

:::{.notes}
I'm Lewis Kirvan, I'm a research manager at the Consumer Finance Protection Bureau. 
:::

## A story with two chapters: {auto-animate="true"}

:::{.incremental style="font-size:1.75em;"}

1. When you need more words.
2. How to make words (a bit) easier!

:::

:::{.notes}
This talk is pretty simple. The first part is about recognizing how important words are for communicating about data. Sure data visualizations are cool, but have you heard of paragraphs? 

The second part of this talk presents a few tactics for making it easy to work with words. Especially when you want to generate some words from text. 
:::

# Chapter 1: {auto-animate="true"}

[When you need more words]{style="font-size:1.5em;"}

## Possibly the most familiar diagram at this conference

![](img/data-science-explore.png){.absolute top="200" left="200" width="600" height="\"400"}

::: {.notes}
I think everyone has probably seen this diagram from R for data science. It really does explain a lot of what happens when making data products. But I do think it undersells one thing.
:::

# [You]{style="color:#257675;"} are in the middle of that cycle

## 

![](img/data-science-explore-you.png){.absolute top="100" left="75" width="900" height="\"600"}

:::{.notes}
there you are. looking cool. So why does this matter? Well, you are building up context for the data and your analysis during that cycle. 
:::

## Some Stuff you might do along the way:

::: {incremental}
-   Look at the application that generates the data
-   Read the survey instrument
-   Talk to application users
-   Read data documentation (if you are so lucky)
-   Read relevant research
-   Talk to experts that know about how and why the data was generated
:::

::: {.notes}
this stuff is all data science too. it's important! if you don't really understand the context of your data it's easy to make mistakes. So this stuff is important and shouldn't be undersold.
:::

## 

::: {style="margin-top: 25px; font-size: 3em;"}
Time to [Communicate]{style="color: #257675;"}
:::

::: {.notes}
At some point, or maybe more likely at several points you will do some communication about your data or your analysis! Yay, this part is fun.
:::

##  {background-color="black" background-image="https://www.matillion.com/wp-content/uploads/2015/01/bad-dashboard-examples-1.png" background-repeat="repeat" style="margin-top: 50px; font-size: 4em;"}

::: {.notes}
No knock on dashboards! I've made a few. And no knock even on this particular dashboard, it's just what google gave me when I asked for "busy dashboards."  It might be a great dashboard for the someone. But sometimes, reflexively reaching for a dashboard or data visualization driven product can be less than optimal. 
:::

## 

::: {style="margin-top: 25px; font-size: 3em;"}
Time to [communicate]{.fragment .strike style="color: #dc731c;"}
[think about your audience]{.fragment .fade-up style="color:#0050b4;"}
:::

## 

::: {style="margin-top: 25px; font-size: 4em;"}
Bring people along on your [journey]{style="color: #257675;"}
:::

::: notes
I like to think about how hard it would be to bring my audience along on the journey I took. How extensive should my packing be.
:::


## Two limit cases: Congress | your immediate team {auto-animate="true"}

::: columns
::: {.column width="40%"}
![](img/congress-report.png)
:::

::: {.column width="10%"}
:::

::: {.column width="40%"}
![](img/team-dashboard.png)
:::
:::

::: notes
I'm going to talk about a couple of quick examples that demonstrate the range of packing you might do for this journey.
:::

## Congress {auto-animate="true"}

::: columns
::: column
![](img/congress-report.png)
:::

::: column
::: incremental
::: {style="font-size:1.75em;"}
-   6 charts
-   2 tables
-   50 pages of context
:::
:::
:::
:::

## Two limit cases: Congress | your immediate team {auto-animate="true"}

::: columns
::: {.column width="40%"}
![](img/congress-report.png)
:::

::: {.column width="10%"}
:::

::: {.column width="40%"}
![](img/team-dashboard.png)
:::
:::

## your immediate team {auto-animate="true"}

::: columns
::: {.column width="50%"}
![](img/team-dashboard.png)
:::

::: {.column width="50%"}
::: incremental
::: {style="font-size:1.75em;"}
-   3 charts
-   6 KPIS
-   less than a paragraph of text
:::
:::
:::
:::

::: notes
-   Labels come directly from data elements
-   Terse chart titles
-   KPIS presented with minimal explanation because everyone understands them.
:::

## [Less shared]{style="color: #257675;"} context means more context needs to be included in your product

```{r }

library(tidyverse)

this_theme <- function(gg){
   
  gg + 
    theme_void() +
    theme(
      panel.background = element_rect(fill='transparent')
      , plot.background = element_rect(fill='transparent', color=NA)
      , panel.grid.major = element_blank()
      , panel.grid.minor = element_blank()
      , legend.background = element_rect(fill='transparent')
      , legend.box.background = element_rect(fill='transparent')
      )
  
}

circle <- function(gg
                   , size = 100
                   , color = "black"
                   , x = 0 
                   , y = 0){
 
  gg + 
    geom_point(aes(x = x, y = y)
               , size = size
               , color = color
               , alpha = .75) 
   }

ggplot(data = NULL)  %>% 
  circle(color = "#eee8d5", x = -1) %>%  
  circle(color = "light grey", x = 1, y = 0) %>%
  this_theme() +
  xlim(-1.75, 1.75) 

```
## [More shared]{style="color: #257675;"} context means you can include less context in your product (but still document!)

```{r}

ggplot(data = NULL)  %>% 
  circle(color = "#eee8d5", x = -0.1) %>%  
  circle(color = "light grey", x = 0.1, y = 0) %>%
  this_theme() +
  xlim(-1.75, 1.75) 

```
## Example : Moving from team communication to external communication 

:::: {.columns}

::: {.column}
![](img/internal-audience.png)
:::

::: {.column}

::: incremental
- interactive tableau dahsboard
- high chart density (dozens!)
- field names correspond to internal system
:::

:::

:::: 

## Example : Moving to an External auidence of bank employees

:::: {.columns}

::: {.column}
![](img/external-audience.png)
:::

::: {.column}

::: incremental
- 3 simple static charts
- Some of those charts are now sentences!
- Names are defined in an introduction
:::

:::

:::: 

## key factors


:::{style='font-size:2.25em;'}
[External]{.fragment .highlight-current-blue}  

[Less technical]{.fragment .highlight-current-blue}  

[More Senior]{.fragment .highlight-current-blue}  

[Time Crunched]{.fragment .highlight-current-blue}  

:::

:::{.notes}
time crunched isn't super intuitive--but if someone is time-crunched they won't look up the context themselves. You've got one shot!
:::

# Chapter 2:

[How to make words (a bit) easier!]{style="font-size:1.5em;"}

## 

::: {style="font-size:3em;"}
[RMARKDOWN]{style="color:green;"}
[RMARKDOWN]{style="color:blue;"}
[RMARKDOWN]{style="color:green;"}
[RMARKDOWN]{style="color:blue;"}
:::

##

::: {style="font-size:3em;"}
[QUARTO]{style="color:green;"}
[QUARTO]{style="color:blue;"}
[QUARTO]{style="color:green;"}
[QUARTO]{style="color:blue;"}
[QUARTO]{style="color:green;"}
[QUARTO]{style="color:blue;"}
[QUARTO]{style="color:green;"}
[QUARTO]{style="color:blue;"}
:::


## Tip 1 Use templating or String interpolation

```{r, eval= TRUE, echo=TRUE}

knitr::knit_engines$set(whisker = function(options ){
  
  if(purrr::is_empty(options$data)){
    options$data <- parent.frame()
    print(options$data)
  }

  whisker::whisker.render(
    template = options$code
    , data = options$data
    , partials = options$partials
  )
  })

```


## Tip 1A use lists as a 'namespace'

```{r, eval= TRUE, echo=TRUE}

whisker_data <- list(
  species = "virginica"
  , mean_length =  iris %>% 
    filter(Species == "virginica") %>% 
    pull(Petal.Length) %>% 
    mean()
  , overall_mean = mean(iris$Petal.Length)
  , field_name = "petal length"
  , other = iris %>%  filter(Species != "virginica") %>% pull(Species) %>% 
    unique() %>% as.character() %>% str_pad(., width = nchar(.) + 1)
)

whisker_data$greater_less <- with(
  whisker_data
  , ifelse(mean_length > overall_mean
           , "longer"
           , "shorter")
  )

```

## Tip 1A use lists as a 'namespace'

```{asis, echo=TRUE}

A typical {{species}} iris has {{greater_less}} {{field_name}} than other iris species ({{other}}).

```

:::{.fragment}
```{whisker, data=whisker_data, evaluate=TRUE, echo=TRUE}

A typical {{species}} iris has {{greater_less}} {{field_name}} than other iris species ({{other}}). 

```
:::

## Use existing design resources 


## Partner with a writer




